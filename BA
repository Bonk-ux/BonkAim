local Workspace = cloneref(game:GetService("Workspace"))
local RunService = cloneref(game:GetService("RunService"))
local Camera = Workspace.CurrentCamera

-- Drawing circles and lines for FOV and Snap Lines
local fov_circle_outer = Drawing.new("Circle")
fov_circle_outer.Visible = true
fov_circle_outer.Thickness = 3
fov_circle_outer.Color = Color3.fromRGB(0, 0, 0)
fov_circle_outer.Position = Camera.ViewportSize / 2
fov_circle_outer.Radius = 121

local fov_circle_inner = Drawing.new("Circle")
fov_circle_inner.Visible = true
fov_circle_inner.Thickness = 1
fov_circle_inner.Color = Color3.fromRGB(255, 255, 255)
fov_circle_inner.Position = Camera.ViewportSize / 2
fov_circle_inner.Radius = 120

local snap_line_outer = Drawing.new("Line")
snap_line_outer.Visible = false
snap_line_outer.Color = Color3.fromRGB(0, 0, 0)
snap_line_outer.Thickness = 3

local snap_line_inner = Drawing.new("Line")
snap_line_inner.Visible = false
snap_line_inner.Color = Color3.fromRGB(255, 255, 255)
snap_line_inner.Thickness = 1

local Settings = {
    ["Combat"] = {
        ["Aimbot"] = {
            ["Enabled"]    = true,
            ["Mode"]       = "SilentAim",  -- Silent Aim mode
            ["Target"]     = "Head",  -- Aim at the head
            ["Enabled2"]   = false,
            ["Fov Size"]   = 120,
            ["Resover"]    = false,
        }
    },
}

local Classes = {
    ["PlayerClient"] = {},
    ["Character"] = {},
    ["BowClient"] = {},
    ["Camera"] = {},
    ["RangedWeaponClient"] = {},
    ["GetEquippedItem"] = {},
    ["FPS"] = {},
}

-- Find relevant functions in the game
for _, v in pairs(getgc(true)) do
    if typeof(v) == "function" and islclosure(v) then
        local info = debug.getinfo(v)
        local name = string.match(info.short_src, "%.([%w_]+)$")
        if name and Classes[name] and info.name ~= nil then
            Classes[name][info.name] = info.func
        end
    end
end

local Players = debug.getupvalue(Classes.PlayerClient.updatePlayers, 1)

-- Check if the player is sleeping (animation check)
function IsSleeping(Player)
    local Animations = Player.AnimationController:GetPlayingAnimationTracks()
    for _, v in pairs(Animations) do
        if v.IsPlaying and v.Animation.AnimationId == "rbxassetid://13280887764" then
            return true
        end
    end
    return false
end

local function GetClosestTarget(maxDistance)
    local closestTarget, targetVelocity, closestDistance = nil, nil, math.huge;

    local viewportCenter = Camera.ViewportSize / 2

    for i, v in pairs(Players) do
        if (v.model:FindFirstChild('HumanoidRootPart') and not IsSleeping(v.model)) and v.id ~= "635665" and v.id ~= "636336" then
            local distanceToPlayer = (v.model.HumanoidRootPart.Position - Camera.CFrame.Position).Magnitude;

            if (distanceToPlayer <= maxDistance) then
                local screenPoint, onScreen = Camera:WorldToViewportPoint(v.model.Head.Position);

                if (onScreen) then
                    local distanceFromCenter = (Vector2.new(screenPoint.X, screenPoint.Y) - viewportCenter).Magnitude;

                    if (distanceFromCenter < closestDistance and distanceFromCenter < fov_circle_inner.Radius) then
                        closestTarget = v
                        targetVelocity = v.velocityVector;
                        closestDistance = distanceFromCenter;
                    end
                end
            end
        end
    end;

    return closestTarget
end

-- FOV and snap lines setup
RunService.Heartbeat:Connect(function()
    target = GetClosestTarget(1200)
    
    if target and target.model and target.model:FindFirstChild("Head") then
        local targetHeadPosition = target.model.Head.Position
        local targetScreenPosition, onScreen = to_viewport(targetHeadPosition)
        
        if onScreen then
            snap_line_outer.Visible = true
            snap_line_inner.Visible = true
            
            snap_line_outer.From = Camera.ViewportSize / 2
            snap_line_outer.To = targetScreenPosition
            
            snap_line_inner.From = Camera.ViewportSize / 2
            snap_line_inner.To = targetScreenPosition
        else
            snap_line_outer.Visible = false
            snap_line_inner.Visible = false
        end
    else
        snap_line_outer.Visible = false
        snap_line_inner.Visible = false
    end
end)

-- Projectile speed and drop based on weapon type
local projectileinfo = {
    AR15 = {Speed = 1300, Drop = 3},
    Blunderbuss = {Speed = 600, Drop = 3.5},
    Bow = {Speed = 300, Drop = 3},
    C9 = {Speed = 600, Drop = 3},
    Crossbow = {Speed = 450, Drop = 3},
    EnergyRifle = {Speed = 2000, Drop = 1.1},
    GaussRifle = {Speed = 3000, Drop = 2},
    HMAR = {Speed = 1000, Drop = 3.5},
    LeverActionRifle = {Speed = 1200, Drop = 1.5},
    M4A1 = {Speed = 1300, Drop = 4},
    PipePistol = {Speed = 500, Drop = 3},
    PipeSMG = {Speed = 600, Drop = 3},
    PumpShotgun = {Speed = 600, Drop = 2},
    SCAR = {Speed = 1300, Drop = 4},
    SVD = {Speed = 1400, Drop = 2},
    USP9 = {Speed = 600, Drop = 3},
    UZI = {Speed = 600, Drop = 3},
    RPG = {Speed = 700, Drop = 3},
}

function Get_info(wep)
    local info = projectileinfo[wep]
    if not info then
        warn("Weapon info not found for:", wep)
        return 0, 0
    end
    return info.Speed, info.Drop
end

local has_shot = 0
local oldfromOrientation
oldfromOrientation = hookfunction(CFrame.fromOrientation, newcclosure(function(p, y, r)
    if debug.info(3, "f") and debug.info(3, "n") == "fire" then
        local wepdata = getstack(3, 1)
        if not wepdata or not target or not target.model or IsSleeping(target.model) then
            return oldfromOrientation(p, y, r)
        end

        local origin = Camera.CFrame.Position
        local targetPosition = target.model:FindFirstChild("Head") and target.model.Head.Position

        -- Instant Hit: No bullet drop prediction, direct hit to the head
        if not targetPosition then
            return oldfromOrientation(p, y, r)
        end

        -- Simply aim directly at the target's head (no prediction)
        local predictedPosition = targetPosition
        local Head = target.model:FindFirstChild("Head") or target.model.PrimaryPart
        if not Head then
            return oldfromOrientation(p, y, r)
        end

        spawn(function()
            local startTime = tick()
            while has_shot == 1 do
                RunService.Heartbeat:Wait()
            end

            has_shot = 1
            while tick() - startTime < 0.1 and Settings["Combat"]["Aimbot"]["Resover"] do
                Head.CFrame = CFrame.new(predictedPosition)
                RunService.Heartbeat:Wait()
            end
            has_shot = 0
        end)

        return Camera.CFrame:Inverse() * CFrame.lookAt(origin, predictedPosition)
    end

    return oldfromOrientation(p, y, r)
end))
